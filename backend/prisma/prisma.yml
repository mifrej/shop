endpoint: ${env:PRISMA_ENDPOINT}
datamodel: datamodel.prisma

# The secret is used to generate JWTs which allow to authenticate
# against your Prisma service. You can use the `prisma token` command from the CLI
# to generate a JWT based on the secret. When using the `prisma-binding` package,
# you don't need to generate the JWTs manually as the library is doing that for you
# (this is why you're passing it to the `Prisma` constructor).
# Here, the secret is loaded as an environment variable from .env.
# secret: ${env:PRISMA_SECRET}

generate:
  - generator: typescript-client
    output: ../src/generated/prisma-client/

# Ensures Prisma client is re-generated after a datamodel change.
hooks:
  post-deploy:
    - prisma generate
    - npx nexus-prisma-generate --client ./src/generated/prisma-client --output ./src/generated/nexus-prisma # Runs the codegen tool from nexus-prisma.

# Seeds initial data into the database by running a script.
seed:
  run: yarn ts-node ./prisma/seed.ts
